(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{158:function(t,s,n){"use strict";n.r(s);var a=n(0),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("p",[t._v("1.js事件机制")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("dom分为dom0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("dom1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("dom2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("dom3"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\ndom事件分为dom0级事件，dom2级事件，dom3级事件\n其中dom0级事件一个元素只能绑定一个事件。通过赋值"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("来解除绑定\ndom2级事件可以通过 dom"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("addeventlistener")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("事件，回调函数，是否冒泡"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("来绑定多个事件，通过removeventlistener来接触绑定，\ndom3级事件则添加了而许多事件，也可以用户自定义事件\n\n事件执行分为三个阶段，捕获"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("》目标"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("》冒泡三个阶段。\n\n每个事件都会产生event，event"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("target和event"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("currentTarget区别\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("）前者表示目标对象，事件触发对象是谁，e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("target就是谁，这个在事件委托中应用\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("）后者则是绑定事件的对象。\n\n为什么是有事件流？\n假如在一个button上注册了一个click事件，又在其它父元素div上注册了一个click事件，\n那么当我们点击button，是先触发父元素上的事件，还是button上的事件呢，\n这就需要一种约定去规范事件的执行顺序，就是事件执行的流程。\n浏览器在发展的过程中出现了两种不同的规范\n\n"),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("IE9")]),t._v("以下的"),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("IE")]),t._v("浏览器使用的是事件冒泡，先从具体的接收元素，然后逐步向上传播到不具体的元素。\nNetscapte采用的是事件捕获，先由不具体的元素接收事件，最具体的节点最后才接收到事件。\n而"),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("W3C")]),t._v("制定的Web标准中，是同时采用了两种方案，事件捕获和事件冒泡都可以。\n\n\n")])])]),n("p",[t._v("1.js事件循环")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("因为js是单线程脚本语言，所有就有了事件循环机制。\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("宏任务")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("macrotask"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("：\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("script")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("整体代码"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("、setTimeout、setInterval、"),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("UI")]),t._v(" 渲染、 "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("I")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("O")]),t._v("、postMessage、 "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("MessageChannel、setImmediate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("js 环境"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("微任务")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("microtask"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("：\nPromise、 MutaionObserver、process"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("nextTick")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("js环境）\n\n首先事件都是在主线程执行的，其次有个任务队列的概念，当主线程执行完毕就会到任务队列取任务，简单来说先执行红任务，执行完毕后，检查是否有微任务，有的话，执行全部微任务，清空后，进入下一个循环。\n\n")])])]),n("p",[t._v("2:浏览器网页渲染过程")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("html被html解析器解析程dom树\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("css被css解析器解析成cssdom树。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("结合dom树和cssdom树生成渲染树\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("生成布局，将渲染树每个节点进行平面合成。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("将布局绘制在屏幕上。\n\n\n浏览器的重排"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("重绘\n\n重排（回流）：当元素几何信息（大小和位置信息），浏览器要重新排列元素的几何信息，将其放在正确的位置，叫做重排。\n引起重排一些操作：js的操作\n\n重绘：一个元素的外观发生改变，但没有改变布局"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("重新把元素外观绘制出来的过程，叫做重绘。\n\n")])])]),n("p",[t._v("https://juejin.im/entry/5a8bc3215188257a856f4b2b\nhttps://juejin.im/post/5b24b116e51d4558a65fdb70")])])}),[],!1,null,null,null);s.default=e.exports}}]);